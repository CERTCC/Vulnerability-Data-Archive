{
  "Author": "This document was written by Garret Wassermann with assistance from David Svoboda and the CERT Secure Coding team.",
  "CAM_AttackerAccessRequired": "0",
  "CAM_EaseOfExploitation": "0",
  "CAM_Exploitation": "0",
  "CAM_Impact": "0",
  "CAM_InternetInfrastructure": "0",
  "CAM_Population": "0",
  "CAM_ScoreCurrent": 0,
  "CAM_ScoreCurrentWidelyKnown": 0,
  "CAM_ScoreCurrentWidelyKnownExploited": 0,
  "CAM_WidelyKnown": "0",
  "CERTAdvisory": "",
  "CVEIDs": "CVE-2015-6420",
  "CVSS_AccessComplexity": "L",
  "CVSS_AccessVector": "N",
  "CVSS_Authenication": "N",
  "CVSS_AvailabilityImpact": "P",
  "CVSS_BaseScore": 7.5,
  "CVSS_BaseVector": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
  "CVSS_CollateralDamagePotential": "ND",
  "CVSS_ConfidentialityImpact": "P",
  "CVSS_EnvironmentalScore": 6.39938352430125,
  "CVSS_EnvironmentalVector": "CDP:ND/TD:H/CR:ND/IR:ND/AR:ND",
  "CVSS_Exploitability": "POC",
  "CVSS_IntegrityImpact": "P",
  "CVSS_RemediationLevel": "W",
  "CVSS_ReportConfidence": "C",
  "CVSS_SecurityRequirementsAR": "ND",
  "CVSS_SecurityRequirementsCR": "ND",
  "CVSS_SecurityRequirementsIR": "ND",
  "CVSS_TargetDistribution": "H",
  "CVSS_TemporalScore": 6.4,
  "CVSS_TemporalVector": "E:POC/RL:W/RC:C",
  "DateCreated": "2015-11-06T18:20:15-05:00",
  "DateFirstPublished": "2015-11-13T12:56:13-05:00",
  "DateLastUpdated": "2018-08-27T13:57:00-04:00",
  "DatePublic": "2015-01-28T00:00:00",
  "Description": "CWE-502: Deserialization of Untrusted Data - CVE-2015-6420 In January 2015, at AppSec California 2015, researchers Gabriel Lawrence and Chris Frohoff described how many Java applications and libraries using Java Object Serialization may be vulnerable to insecure deserialization of data, which may result in arbitrary code execution. Any Java library or application that utilizes this functionality incorrectly may be impacted by this vulnerability. In November 2015, Stephen Breen of Foxglove Security identified the Apache Commons Collections (ACC) Java library as being vulnerable to insecure deserialization of data; specifically, the ACC  InvokerTransformer class may allow arbitrary code execution when used to deserialize data from untrusted sources. According to the researcher, this issue affects several large projects that utilize ACC including WebSphere, JBoss, Jenkins, WebLogic, and OpenNMS. Unify also reports that OpenScape software is affected. In addition, Cisco has released an advisory for their products. Both versions 3.2.1 and 4.0 of the Apache Commons Collections library have been identified as being vulnerable to this deserialization issue. The Apache Software Foundation has released a statement regarding this issue, which contains advice for mitigating the issue, as well as further references and links. A bug tracker entry has been filed to track progress toward a full solution. Other libraries, such as Groovy and Spring, are currently being investigated for similar flaws. Lawrence and Frohoff's presentation describes how applications and libraries written in other languages, such as Python and Ruby, may also be vulnerable to the same type of issue. It is generally up to software designers to follow best practices for security when handling serialized data, no matter the programming language or library used.",
  "ID": "VU#576313",
  "IDNumber": "576313",
  "IPProtocol": "",
  "Impact": "A Java application or library with the Apache Commons Collections library in its classpath may be coerced into executing arbitrary Java functions or bytecode. While many applications do not actively use serialization or deserailization, they often rely on libraries that do. If a class uses deserialization on some input stream (either a file or socket), and an attacker can send malicious data down that stream, the attacker can cause the program to construct objects of any class on its classpath (whether it uses those classes or not). And some classes, such as those in the ACC automatically execute code based on attacker-supplied deserialization input. An application that neither uses deserialization, nor employs any libraries that use deserialization, would not be vulnerable to this problem. Such an application should also lack a plugin architecture, or any mechanism for loading code that might use deserialization.",
  "Keywords": [
    "apache",
    "java",
    "deserialization",
    "serialization",
    "data"
  ],
  "Overview": "The Apache Commons Collections (ACC) library is vulnerable to insecure deserialization of data, which may result in arbitrary code execution. Java applications that either directly use ACC, or contain ACC in their classpath, may be vulnerable to arbitrary code execution.",
  "References": [
    "https://blogs.apache.org/foundation/entry/apache_commons_statement_to_widespread",
    "https://issues.apache.org/jira/browse/COLLECTIONS-580",
    "http://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-20151209-java-deserialization",
    "https://networks.unify.com/security/advisories/OBSO-1511-01.pdf",
    "http://www.oracle.com/technetwork/topics/security/alert-cve-2015-4852-2763333.html?elq_mid=31793&sh=&cmid=WWSU12091612MPP001C179 ",
    "https://wiki.jenkins-ci.org/display/SECURITY/Jenkins+Security+Advisory+2015-11-11",
    "http://www.openwall.com/lists/oss-security/2015/11/11/3",
    "http://www.infoq.com/news/2015/11/commons-exploit",
    "https://tersesystems.com/2015/11/08/closing-the-open-door-of-java-object-serialization/",
    "http://foxglovesecurity.com/2015/11/06/what-do-weblogic-websphere-jboss-jenkins-opennms-and-your-application-have-in-common-this-vulnerability/",
    "http://mail-archives.apache.org/mod_mbox/commons-dev/201511.mbox/%3c20151106222553.00002c57.ecki@zusammenkunft.net%3e",
    "http://frohoff.github.io/appseccali-marshalling-pickles/",
    "http://www.slideshare.net/frohoff1/appseccali-2015-marshalling-pickles",
    "https://www.youtube.com/watch?v=VviY3O-euVQ",
    "https://commons.apache.org/proper/commons-collections/",
    "http://cwe.mitre.org/data/definitions/502.html",
    "https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=27492407",
    "http://www.oracle.com/technetwork/java/seccodeguide-139067.html#8"
  ],
  "Resolution": "The CERT/CC is currently unaware of a full solution to this problem, but you may consider the following: Apply an update Apache Commons Collections version 3.2.2 and version 4.1 has been released. These new releases mitigate the vulnerability by disabling the insecure functionality. Developers need to re-architect their applications, and should be suspicious of deserialized data from untrusted sources Developers will need to make further architectural changes to secure their applications before they can re-enable functionality in ACC version 3.2.2 and later. From Apache's statement: However, to be clear: this is not the only known and especially not unknown useable gadget. So replacing your installations with a hardened version of Apache Commons Collections will not make your application resist this vulnerability. Developers should in general be very suspicious of deserialized data from an untrusted source. For best practices, see the CERT Oracle Coding Standard for Java guidelines for Serialization, especially rules SER12-J and SER13-J. Use firewall rules or filesystem restrictions System administrators may be able to mitigate this issue for some applications by restricting access to the network and/or filesystem. If an affected application, such as Jenkins, utilizes an open port accepting serialized objects, restricting access to the application may help mitigate the issue.",
  "Revision": 89,
  "SystemsAffectedPreamble": "",
  "ThanksAndCredit": "This type of vulnerability was reported publicly by Gabriel Lawrence and Chris Frohoff, and later investigated by Stephen Breen.",
  "Title": "Apache Commons Collections Java library insecurely deserializes data",
  "US-CERTTechnicalAlert": "",
  "VRDA_D1_DirectReport": "1",
  "VRDA_D1_Impact": "3",
  "VRDA_D1_Population": "3",
  "VulnerabilityCount": 1,
  "Workarounds": ""
}