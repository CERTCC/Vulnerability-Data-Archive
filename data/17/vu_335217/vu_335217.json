{
  "Author": "This document was written by Vijay S Sarvepalli.",
  "CAM_AttackerAccessRequired": "0",
  "CAM_EaseOfExploitation": "0",
  "CAM_Exploitation": "0",
  "CAM_Impact": "0",
  "CAM_InternetInfrastructure": "0",
  "CAM_Population": "0",
  "CAM_ScoreCurrent": 0,
  "CAM_ScoreCurrentWidelyKnown": 0,
  "CAM_ScoreCurrentWidelyKnownExploited": 0,
  "CAM_WidelyKnown": "0",
  "CERTAdvisory": "",
  "CVEIDs": "",
  "CVSS_AccessComplexity": "M",
  "CVSS_AccessVector": "N",
  "CVSS_Authenication": "N",
  "CVSS_AvailabilityImpact": "N",
  "CVSS_BaseScore": 5.8,
  "CVSS_BaseVector": "AV:N/AC:M/Au:N/C:P/I:P/A:N",
  "CVSS_CollateralDamagePotential": "ND",
  "CVSS_ConfidentialityImpact": "P",
  "CVSS_EnvironmentalScore": 4.92530984505,
  "CVSS_EnvironmentalVector": "CDP:ND/TD:H/CR:ND/IR:ND/AR:ND",
  "CVSS_Exploitability": "POC",
  "CVSS_IntegrityImpact": "P",
  "CVSS_RemediationLevel": "W",
  "CVSS_ReportConfidence": "C",
  "CVSS_SecurityRequirementsAR": "ND",
  "CVSS_SecurityRequirementsCR": "ND",
  "CVSS_SecurityRequirementsIR": "ND",
  "CVSS_TargetDistribution": "H",
  "CVSS_TemporalScore": 5,
  "CVSS_TemporalVector": "E:POC/RL:W/RC:C",
  "DateCreated": "2019-08-30T09:19:42-04:00",
  "DateFirstPublished": "2020-01-14T14:27:53-05:00",
  "DateLastUpdated": "2020-05-07T16:17:00-04:00",
  "DatePublic": "2020-01-14T00:00:00",
  "Description": "CDNs use HTTP caching software to provide high availability and high performance by distributing the service spatially relative to end-users. The HTTP caching software interprets the HTTP request from a website visitor (web client) using the supplied HTTP headers to select and deliver appropriate content. The content can either be delivered from the local cache or collected by reaching the appropriate back end web servers. This vulnerability works by sending arbitrary headers into the HTTP request stream, which may be processed by the back end web server or by the HTTP caching software. If either the web server or the HTTP caching software is vulnerable, it will include the attackers injected content in the response without performing any type of sanitization. Once the attacker's malicious content is returned, it will also be cached by the HTTP caching software. The HTTP caching software will continue to serve the malicious content to all future visitors of the website until the cache expires or is deleted. This allows the attacker to inject arbitrary content once and have multiple future visitors of the CDN hosted website collect the attacker's content and execute unwanted scripts. HTTP header injection using traditional headers, like the Host header and X-Forwarded-Host header, is not a new attack method. New HTTP headers like X-Forwarded-Proto, Referer, Upgrade-Insecure-Requests, and X-DNS-Prefetch-Control have been created to provide more capabilities for HTTP processing. Cloud caching in addition to newly available headers allows for an increase in prolonged, large scale attacks against busy and popular websites. Some examples of the vulnerable headers are: Content-Security-Policy-Report-Only\nForwarded\nServer-Timing\nSet-Cookie\nStrict-Transport-Security\nX-Forwarded-Proto\nLocation\nAccept-Language\nCookie\nX-Forwarded-For\nX-Forwarded-Host\nReferer\nMax-Forwards There are at least two common reasons why these attacks are possible: 1. Certain HTTP headers (e.g., X-Forwarded-Host) are sent by the reverse proxy or CDN to the web server and are many times presumed to be generated/modified by the CDN and therefore trusted. 2. Certain HTTP headers (e.g., User-Agent) are not sanitized by the CDN before being delivered to the web server.",
  "ID": "VU#335217",
  "IDNumber": "335217",
  "IPProtocol": "",
  "Impact": "By performing a malicious request using HTTP headers, an attacker could poison the cache of an CDN provider and inject malicious content that will affect multiple future visitors of the website.",
  "Keywords": [
    "HTTP",
    "headers",
    "cache poisoning"
  ],
  "Overview": "A Content Delivery Network  (CDN) is a distributed network of proxy servers that deliver web content collected from a back end web server using a temporary local storage called a cache. HTTP cache poisoning is a type of attack that allows a remote attacker to inject arbitrary content using unsanitized HTTP headers to poison the remote cache of a CDN. Once an attacker has successfully injected malicious content, future visitors accessing the compromised website will collect and execute the attacker\u2019s injected scripts.",
  "References": [
    "http://carlos.bueno.org/2008/06/host-header-injection.html",
    "https://www.skeletonscribe.net/2013/05/practical-http-host-header-attacks.html",
    "https://portswigger.net/research/practical-web-cache-poisoning",
    "https://hostoftroubles.com",
    "https://www.owasp.org/index.php/OWASP_Periodic_Table_of_Vulnerabilities_-_HTTP_Request/Response_Smuggling",
    "https://www.owasp.org/index.php/Cache_Poisoning",
    "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html ",
    "https://dl.acm.org/citation.cfm?id=2978394"
  ],
  "Resolution": "CDN service providers should implement both of these recommendations: 1. CDNs should inspect and sanitize headers using appropriate enforcement and strict adherence to applicable RFCs before forwarding theses headers to back end web servers. 2. CDNs should also replace, remove, or append headers after sanitiziation that are submitted by the client but are expected to be generated or validated by the CDN, such as the X-Forwarded-Host header. Back end web servers should not trust any content sent as part of the HTTP request. Web servers should implement secure encoding of output appropriate for the common context targets in web applications (e.g. HTML, XML, JavaScript, etc) as recommended by OWASP.",
  "Revision": 63,
  "SystemsAffectedPreamble": "",
  "ThanksAndCredit": "Thanks to Dr. Mingkui Wei from Cyber Forensic Intelligence Center, Computer Science, Sam Houston State University for reporting this vulnerability. We would also like to acknowledge the prior research completed by Carlos Bueno and James Kettle.",
  "Title": "Content Delivery Networks handle HTTP headers in different and unexpected ways",
  "US-CERTTechnicalAlert": "",
  "VRDA_D1_DirectReport": "1",
  "VRDA_D1_Impact": "",
  "VRDA_D1_Population": "",
  "VulnerabilityCount": 1,
  "Workarounds": "As a work around, caching software providers can disable caching when suspicious content is found in the HTTP headers or the body of the HTTP requests. This prevents the storing and distributing of malicious content to all visitors of a website. Back end web server administrators can use the appropriate Cache-Control and Expiry headers to avoid caching of dynamically generated content by the CDNs. This will prevent the storage and delivery of malicious content to future visitors."
}